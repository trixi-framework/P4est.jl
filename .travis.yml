# https://docs.travis-ci.com/user/languages/julia/

language: julia

julia:
  - 1.6 # latest 1.x.y
  # - nightly

os:
  - linux

jobs:
  allow_failures:
    - julia: nightly
  include:
    - if: type = push AND branch = master
      julia: 1.6
      os: osx
  exclude:
    - os: osx
      env: P4EST_TEST=P4EST_CUSTOM_NON_MPI
    - os: osx
      env: P4EST_TEST=P4EST_CUSTOM_USES_MPI
    # - stage: "Documentation"
    #   julia: 1
    #   os: linux
    #   script:
    #     - julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd()));
    #                                            Pkg.build("Trixi");
    #                                            Pkg.instantiate()'
    #     - julia --project=docs/ docs/make.jl
    #   after_success: skip

# coveralls with merging of multiple builds, cf. https://docs.coveralls.io/parallel-build-webhook
coveralls: true
env:
  global:
    - COVERALLS_PARALLEL=true
  jobs:
    - P4EST_TEST=P4EST_JLL_PRE_GENERATED_BINDINGS
    - P4EST_TEST=P4EST_JLL_NON_MPI
    - P4EST_TEST=P4EST_CUSTOM_NON_MPI
    - P4EST_TEST=P4EST_CUSTOM_USES_MPI
notifications:
  webhooks: https://coveralls.io/webhook
  email: false

# codecov merges multiple reports automatically, cf. https://docs.codecov.io/docs/merging-reports
codecov: true

# avoid duplicate tests in PRs
branches:
  only:
    - master

# we could install binary dependencies if necessary
addons:
  apt:
    packages:
      - gfortran
      - liblapack-dev
      - libblas-dev
      - mpich
      - libmpich-dev

before_script:
  - ./.travis_install_p4est.sh

script:
  # Default option re-uses pre-generated bindings
  - if [[ "${P4EST_TEST}" == "P4EST_JLL_NON_MPI_PRE_GENERATED_BINDINGS" ]]; then
      echo "P4EST_JLL_NON_MPI_PRE_GENERATED_BINDINGS does not require special settings";
    fi
  # nothing to do; equivalent to
  # export JULIA_P4EST_LIBRARY="";
  # export JULIA_P4EST_INCLUDE="";
  # export JULIA_P4EST_USES_MPI="";
  # export JULIA_P4EST_MPI_INCLUDE="";
  - if [[ "${P4EST_TEST}" == "P4EST_JLL_NON_MPI" ]]; then
      export JULIA_P4EST_GENERATE_BINDINGS="yes";
      echo "P4EST_JLL_NON_MPI requires setting JULIA_P4EST_GENERATE_BINDINGS='yes'";
    fi
  # set library and include paths according to custom build in .travis_install_p4est.sh
  - if [[ "${P4EST_TEST}" == "P4EST_CUSTOM_NON_MPI" ]]; then
      export JULIA_P4EST_GENERATE_BINDINGS="yes";
      export P4EST_TMP=`pwd`/libp4est_tmp_non_mpi;
      export JULIA_P4EST_LIBRARY="$P4EST_TMP/prefix/lib/libp4est-2.2.so";
      export JULIA_P4EST_INCLUDE="$P4EST_TMP/prefix/include";
      echo "P4EST_CUSTOM_NON_MPI requires setting JULIA_P4EST_GENERATE_BINDINGS='yes' and JULIA_P4EST_LIBRARY=$JULIA_P4EST_LIBRARY and JULIA_P4EST_INCLUDE=$JULIA_P4EST_INCLUDE";
    fi
  - if [[ "${P4EST_TEST}" == "P4EST_CUSTOM_USES_MPI" ]]; then
      export JULIA_P4EST_GENERATE_BINDINGS="yes";
      export P4EST_TMP=`pwd`/libp4est_tmp_uses_mpi;
      export JULIA_P4EST_LIBRARY="$P4EST_TMP/prefix/lib/libp4est-2.2.so";
      export JULIA_P4EST_INCLUDE="$P4EST_TMP/prefix/include";
      export JULIA_P4EST_USES_MPI=yes;
      export JULIA_P4EST_MPI_INCLUDE=/usr/include/mpich;
      echo "P4EST_CUSTOM_USES_MPI requires setting JULIA_P4EST_GENERATE_BINDINGS='yes' and JULIA_P4EST_LIBRARY=$JULIA_P4EST_LIBRARY and JULIA_P4EST_INCLUDE=$JULIA_P4EST_INCLUDE and JULIA_P4EST_USES_MPI=$JULIA_P4EST_USES_MPI and JULIA_P4EST_MPI_INCLUDE=$JULIA_P4EST_MPI_INCLUDE";
    fi
  - julia --color=yes --check-bounds=yes -e 'using Pkg; Pkg.build(; verbose=true); Pkg.test(coverage=true)'

# submit coverage reports (enabled already above) and/or deploy docs
# after_success:
