[general]
# it could also be an expression as long as `Meta.parse` can parse this string successfully.
# basically, it should be the `expression` in the following code:
# ccall((function_name, expression), returntype, (argtype1, ...), argvalue1, ...)
library_name = "libp4est"

# this entry allows you to specify different library names for different headers.
# in the following example:
# library_names = {"config.h" = "libclang_config", "libclang_p.*.h" = "libclang_patch"}
# those functions in the `config.h` will be generated as:
# ccall((function_name, libclang_config), returntype, (argtype1, ...), argvalue1, ...)
library_names = {}

# output file path relative to the working directory
output_file_path = "LibP4est.jl"

# if these are set, common file (types and constants) and API file (functions) will be separated
# this is for compatibility, so prologue and epilogue are not supported.
# output_api_file_path = "api.jl"
# output_common_file_path = "common.jl"

# if this entry is not empty, the generator will print the code below to the `output_file_path`.
# module module_name
#
# end # module
module_name = "LibP4est"

# if this entry is not empty, the generator will print the code below to the `output_file_path`.
# using jll_pkg_name
# export jll_pkg_name
# We do not set this option since we want to customize it in prologue.jl.
# jll_pkg_name = "P4est_jll"
jll_pkg_name = ""

# for packages that have extra JLL package dependencies
jll_pkg_extra = []

# identifiers that starts with the string listed in this entry will be exported.
export_symbol_prefixes = ["p4est_", "p6est_", "p8est_", "sc_", "P4EST_", "P6EST_", "P8EST_", "SC_"]

# the code in the following file will be copy-pasted to `output_file_path` before the generated code.
# this is often used for applying custom patches, e.g. adding missing definitions.
prologue_file_path = "./prologue.jl"

# the code in the following file will be copy-pasted to `output_file_path` after the generated code.
# this is often used for applying custom patches.
epilogue_file_path = "./epilogue.jl"

# node with an id in the `output_ignorelist` will be ignored in the printing passes.
# this is very useful for custom editing.
output_ignorelist = [
  "_sc_restrict",
  "sc_extern_c_hack_3",
  "sc_extern_c_hack_4",
  "SC_EXTERN_C_BEGIN",
  "SC_EXTERN_C_END",
  "SC_GCC_VERSION",
  "PLATFORM_COMPILER_VERSION",
  "__PLATFORM_COMPILER_GNU_VERSION_STR",
  "_p4est_const",
  "sc_MPI_2INT",
  "sc_MPI_SUCCESS",
  "sc_MPI_ERR_OTHER",
  "sc_MPI_COMM_NULL",
  # "sc_MPI_COMM_WORLD",
  # "sc_MPI_COMM_SELF",
  "sc_MPI_COMM_TYPE_SHARED",
  "sc_MPI_GROUP",
  "sc_MPI_GROUP_NULL",
  "sc_MPI_GROUP_EMPTY",
  "sc_MPI_IDENT",
  "sc_MPI_CONGRUENT",
  "sc_MPI_SIMILAR",
  "sc_MPI_UNEQUAL",
  "sc_MPI_ANY_SOURCE",
  "sc_MPI_ANY_TAG",
  "sc_MPI_STATUS_IGNORE",
  "sc_MPI_STATUSES_IGNORE",
  "sc_MPI_REQUEST_NULL",
  "sc_MPI_INFO_NULL",
  "sc_MPI_DATATYPE_NULL",
  # "sc_MPI_CHAR",
  # "sc_MPI_SIGNED_CHAR",
  # "sc_MPI_UNSIGNED_CHAR",
  # "sc_MPI_BYTE",
  # "sc_MPI_SHORT",
  # "sc_MPI_UNSIGNED_SHORT",
  # "sc_MPI_INT",
  # "sc_MPI_UNSIGNED",
  # "sc_MPI_LONG",
  # "sc_MPI_UNSIGNED_LONG",
  # "sc_MPI_LONG_LONG_INT",
  # "sc_MPI_UNSIGNED_LONG_LONG",
  # "sc_MPI_FLOAT",
  # "sc_MPI_DOUBLE",
  "sc_MPI_LONG_DOUBLE",
  "sc_MPI_Op",
  "sc_MPI_OP_NULL",
  "sc_MPI_MAX",
  "sc_MPI_MIN",
  "sc_MPI_LAND",
  "sc_MPI_BAND",
  "sc_MPI_LOR",
  "sc_MPI_BOR",
  "sc_MPI_LXOR",
  "sc_MPI_BXOR",
  "sc_MPI_MINLOC",
  "sc_MPI_MAXLOC",
  "sc_MPI_REPLACE",
  "sc_MPI_SUM",
  "sc_MPI_PROD",
  "sc_MPI_UNDEFINED",
  "sc_MPI_KEYVAL_INVALID",
  "sc_MPI_Status",
  "sc_MPI_Init",
  "sc_MPI_Finalize",
  "sc_MPI_Abort",
  "sc_MPI_Alloc_mem",
  "sc_MPI_Free_mem",
  "sc_MPI_Comm_set_attr",
  "sc_MPI_Comm_get_attr",
  "sc_MPI_Comm_delete_attr",
  "sc_MPI_Comm_create_keyval",
  "sc_MPI_Comm_dup",
  "sc_MPI_Comm_create",
  "sc_MPI_Comm_split",
  "sc_MPI_Comm_split_type",
  "sc_MPI_Comm_free",
  "sc_MPI_Comm_size",
  "sc_MPI_Comm_rank",
  "sc_MPI_Comm_compare",
  "sc_MPI_Comm_group",
  "sc_MPI_Group_free",
  "sc_MPI_Group_size",
  "sc_MPI_Group_rank",
  "sc_MPI_Group_translate_ranks",
  "sc_MPI_Group_compare",
  "sc_MPI_Group_union",
  "sc_MPI_Group_intersection",
  "sc_MPI_Group_difference",
  "sc_MPI_Group_incl",
  "sc_MPI_Group_excl",
  "sc_MPI_Group_range_incl",
  "sc_MPI_Group_range_excl",
  "sc_MPI_Barrier",
  "sc_MPI_Bcast",
  "sc_MPI_Gather",
  "sc_MPI_Gatherv",
  "sc_MPI_Allgather",
  "sc_MPI_Allgatherv",
  "sc_MPI_Alltoall",
  "sc_MPI_Reduce",
  "sc_MPI_Reduce_scatter_block",
  "sc_MPI_Allreduce",
  "sc_MPI_Scan",
  "sc_MPI_Exscan",
  "sc_MPI_Request",
  "sc_MPI_Recv",
  "sc_MPI_Irecv",
  "sc_MPI_Send",
  "sc_MPI_Isend",
  "sc_MPI_Probe",
  "sc_MPI_Iprobe",
  "sc_MPI_Get_count",
  "sc_MPI_Wtime",
  "sc_MPI_Wait",
  "sc_MPI_Waitsome",
  "sc_MPI_Waitall",
  "sc_MPI_Init_thread",
  "sc_MPI_THREAD_SINGLE",
  "sc_MPI_THREAD_FUNNELED",
  "sc_MPI_THREAD_SERIALIZED",
  "sc_MPI_THREAD_MULTIPLE",
]

# Julia's `@enum` do not allow duplicated values, so by default, C enums are translated to
# CEnum.jl's `@cenum`.
# if this entry is true, `@enum` is used and those duplicated enum constants are just commented.
use_julia_native_enum_type = false

# use `@cenum` but do not print `using CEnum`.
# this is useful in the case of using `CEnum` directly in the source tree instead of using `CEnum` as a dependency
print_using_CEnum = true

# Print enums directly as integers without @(c)enum wrapper
# Override above two options
print_enum_as_integer = false

# use deterministic symbol instead of `gensym`-generated `var"##XXX"`
use_deterministic_symbol = true

# by default, only those declarations in the local header file are processed.
# those declarations in the system headers will be treated specially and will be generated if necessary.
# if you'd like to generate all of the symbols in the system headers, please set this option to false.
is_local_header_only = true

# if this option is set to true, C code with a style of
# ```c
# typedef struct {
#     int x;
# } my_struct;
# ```
# will be generated as:
# ```julia
# struct my_struct
#     x::Cint
# end
# ```
# instead of
# ```julia
# struct var"##Ctag#NUM"
#     x::Cint
# end
# const my_struct = var"##Ctag#NUM"
# ```
smart_de_anonymize = true

# EXPERIMENTAL
# if this option is set to true, those structs that are not necessary to be an
# immutable struct will be generated as a mutable struct.
# this option is default to false, do read the paragraph below before using this feature.
auto_mutability = false

# add inner constructor `Foo() = new()`
auto_mutability_with_new = true

# if you feel like certain structs should not be generated as mutable struct, please add them in the following list.
# for example, if a C function accepts a `Vector` of some type as its argument like:
#     void foo(mutable_type *list, int n);
# when calling this function via `ccall`, passing a `Vector{mutable_type}(undef, n)` to the first
# argument will trigger a crash, the reason is mutable structs are not stored inline within a `Vector`,
# one should use `Ref{NTuple{n,mutable_type}}()` instead.
# this is not convenient and that's where the `auto_mutability_ignorelist` comes in.
auto_mutability_ignorelist = []

# opposite to `auto_mutability_ignorelist` and has a higher priority
auto_mutability_includelist = []

# if set to "raw", extract and dump raw c comment;
# if set to "doxygen", parse and format doxygen comment.
# note: by default, Clang only parses doxygen comment, pass `-fparse-all-comments` to Clang in order to parse non-doxygen comments.
extract_c_comment_style = "doxygen"

# if set to true, single line comment will be printed as """comment""" instead of """\ncomment\n"""
# fold_single_line_comment = false
fold_single_line_comment = true

# if set to "outofline", documentation of struct fields will be collected at the "Fields" section of the struct
# if set to "inline", documentation of struct fields will go right above struct definition
struct_field_comment_style = "outofline"

# if set to "outofline", documentation of enumerators will be collected at the "Enumerators" section of the enum
enumerator_comment_style = "outofline"

# if set to true, C function prototype will be included in documentation
show_c_function_prototype = true

[codegen]
# map C's bool to Julia's Bool instead of `Cuchar` a.k.a `UInt8`.
use_julia_bool = true

# set this to true if the C routine always expects a NUL-terminated string.
# TODO: support filtering
always_NUL_terminated_string = true

# generate strictly typed function
is_function_strictly_typed = false

# if true, opaque pointers in function arguments will be translated to `Ptr{Cvoid}`.
opaque_func_arg_as_PtrCvoid = false

# if true, opaque types are translated to `mutable struct` instead of `Cvoid`.
opaque_as_mutable_struct = true

# if true, use Julia 1.5's new `@ccall` macro
use_ccall_macro = true

# if true, variadic functions are wrapped with `@ccall` macro. Otherwise variadic functions are ignored.
wrap_variadic_function = true

# generate getproperty/setproperty! methods for the types in the following list
field_access_method_list = []

# the generator will prefix the function argument names in the following list with a "_" to
# prevent the generated symbols from conflicting with the symbols defined and exported in Base.
function_argument_conflict_symbols = []

# emit constructors for all custom-layout structs like bitfield in the list,
# or set to `true` to do so for all such structs
add_record_constructors = []

[codegen.macro]
# itâ€˜s highly recommended to set this entry to "basic".
# if you'd like to skip all of the macros, please set this entry to "disable".
# if you'd like to translate function-like macros to Julia, please set this entry to "aggressive".
macro_mode = "basic"

# function-like macros in the following list will always be translated.
functionlike_macro_includelist = [
    "P4EST_QUADRANT_LEN",
    "P4EST_QUADRANT_MASK",
    "P4EST_LAST_OFFSET",
    "P8EST_QUADRANT_LEN",
    "P8EST_QUADRANT_MASK",
    "P8EST_LAST_OFFSET"
    # "CINDEX_VERSION_ENCODE",
]

# if true, the generator prints the following message as comments.
# "# Skipping MacroDefinition: ..."
add_comment_for_skipped_macro = true

# if true, ignore any macros that is suffixed with "_H" or in the `ignore_header_guards_with_suffixes` list
ignore_header_guards = true
ignore_header_guards_with_suffixes = []

# if true, ignore those pure definition macros in the C code
ignore_pure_definition = true
