name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'LICENSE.md'
      - 'README.md'
      - '.github/workflows/CompatHelper.yml'
      - '.github/workflows/DocPreviewCleanup.yml'
      - '.github/workflows/TagBot.yml'
  pull_request:
    paths-ignore:
      - 'LICENSE.md'
      - 'README.md'
      - '.github/workflows/CompatHelper.yml'
      - '.github/workflows/DocPreviewCleanup.yml'
      - '.github/workflows/TagBot.yml'
  workflow_dispatch:

# Cancel redundant CI tests automatically
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: ${{ matrix.os }} - ${{ matrix.p4est_test }} - Julia ${{ matrix.version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'
          # - 'nightly'
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        arch:
          - x64
        p4est_test:
          - P4EST_JLL_NON_MPI_PRE_GENERATED_BINDINGS
          - P4EST_JLL_NON_MPI
          - P4EST_CUSTOM_NON_MPI
          - P4EST_CUSTOM_USES_MPI
        # Only selected tests on macOS and Windows, since not everything works everywhere yet
        include:
          - version: '1.6'
            os: macOS-latest
            arch: x64
            p4est_test: P4EST_JLL_NON_MPI_PRE_GENERATED_BINDINGS
          - version: '1.6'
            os: macOS-latest
            arch: x64
            p4est_test: P4EST_JLL_NON_MPI
          - version: '1.6'
            os: windows-latest
            arch: x64
            p4est_test: P4EST_JLL_NON_MPI_PRE_GENERATED_BINDINGS
          # Additional tests on Julia v1.7
          - version: '^1.7.0-0'
            os: ubuntu-latest
            arch: x64
            p4est_test: P4EST_JLL_NON_MPI_PRE_GENERATED_BINDINGS
          - version: '^1.7.0-0'
            os: macOS-latest
            arch: x64
            p4est_test: P4EST_JLL_NON_MPI_PRE_GENERATED_BINDINGS
          - version: '^1.7.0-0'
            os: windows-latest
            arch: x64
            p4est_test: P4EST_JLL_NON_MPI_PRE_GENERATED_BINDINGS
    steps:
      - uses: actions/checkout@v2
      - name: Set p4est release to run tests against
        run: |
          P4EST_RELEASE=2.3.1
          echo "P4EST_RELEASE=$P4EST_RELEASE" >> $GITHUB_ENV
          echo "P4EST_RELEASE=$P4EST_RELEASE"
        shell: bash
      - name: Set environment variables
        run: |
          echo "Setting variables for '${{ matrix.p4est_test }}'..."
          echo "P4EST_TEST=${{ matrix.p4est_test }}" >> $GITHUB_ENV
          echo "P4EST_TEST=${{ matrix.p4est_test }}"
          if [[ ${{ matrix.p4est_test }} == "P4EST_JLL_NON_MPI_PRE_GENERATED_BINDINGS" ]]; then
            echo "(no additional environment variables required)"
          elif [[ ${{ matrix.p4est_test }} == "P4EST_JLL_NON_MPI" ]]; then
            echo "JULIA_P4EST_GENERATE_BINDINGS=yes" >> $GITHUB_ENV
            echo "JULIA_P4EST_GENERATE_BINDINGS=yes"
          elif [[ ${{ matrix.p4est_test }} == "P4EST_CUSTOM_NON_MPI" ]]; then
            echo "JULIA_P4EST_GENERATE_BINDINGS=yes" >> $GITHUB_ENV
            echo "JULIA_P4EST_GENERATE_BINDINGS=yes"
            P4EST_TMP=`pwd`/libp4est_tmp_non_mpi
            echo "P4EST_TMP=$P4EST_TMP" >> $GITHUB_ENV
            echo "P4EST_TMP=$P4EST_TMP"
            echo "JULIA_P4EST_LIBRARY=$P4EST_TMP/prefix/lib/libp4est.so" >> $GITHUB_ENV
            echo "JULIA_P4EST_LIBRARY=$P4EST_TMP/prefix/lib/libp4est.so"
            echo "JULIA_P4EST_INCLUDE=$P4EST_TMP/prefix/include" >> $GITHUB_ENV
            echo "JULIA_P4EST_INCLUDE=$P4EST_TMP/prefix/include"
          elif [[ ${{ matrix.p4est_test }} == "P4EST_CUSTOM_USES_MPI" ]]; then
            echo "JULIA_P4EST_GENERATE_BINDINGS=yes" >> $GITHUB_ENV
            echo "JULIA_P4EST_GENERATE_BINDINGS=yes"
            P4EST_TMP=`pwd`/libp4est_tmp_uses_mpi
            echo "P4EST_TMP=$P4EST_TMP" >> $GITHUB_ENV
            echo "P4EST_TMP=$P4EST_TMP"
            echo "JULIA_P4EST_LIBRARY=$P4EST_TMP/prefix/lib/libp4est.so" >> $GITHUB_ENV
            echo "JULIA_P4EST_LIBRARY=$P4EST_TMP/prefix/lib/libp4est.so"
            echo "JULIA_P4EST_INCLUDE=$P4EST_TMP/prefix/include" >> $GITHUB_ENV
            echo "JULIA_P4EST_INCLUDE=$P4EST_TMP/prefix/include"
            echo "JULIA_P4EST_USES_MPI=yes" >> $GITHUB_ENV
            echo "JULIA_P4EST_USES_MPI=yes"
            echo "JULIA_P4EST_MPI_INCLUDE=/usr/include/x86_64-linux-gnu/mpich" >> $GITHUB_ENV
            echo "JULIA_P4EST_MPI_INCLUDE=/usr/include/x86_64-linux-gnu/mpich"
          else
            echo "ERROR: unknown test type ${{ matrix.p4est_test }}" >&2
            exit 1
          fi
          echo "Done."
        shell: bash
      - name: Install custom p4est libraries for testing
        run: |
          if [[ ${{ matrix.p4est_test }} == "P4EST_CUSTOM_USES_MPI" ]]; then
            sudo apt-get install -y mpich libmpich-dev
          fi
          ./.ci_install_p4est.sh
        shell: bash
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
          show-versioninfo: true
      - uses: julia-actions/cache@v1
      - uses: julia-actions/julia-buildpkg@v1
        env:
          PYTHON: ""
      - uses: julia-actions/julia-runtest@v1
        env:
          PYTHON: ""
      - uses: julia-actions/julia-processcoverage@v1
      - uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: run-${{ matrix.os }}-${{ matrix.version }}-${{ matrix.arch }}
          parallel: true
          path-to-lcov: ./lcov.info
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./lcov.info # optional
          flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          # verbose: true # optional (default = false)

  finish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
